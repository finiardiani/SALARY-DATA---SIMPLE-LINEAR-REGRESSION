# -*- coding: utf-8 -*-
"""Salary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QB6k3oWzUnRei1Ak1cYmsfJWA0RUqvbF

SALARY DATA - SIMPLE LINEAR REGRESSION
"""

# upload files ke lembar kerja
from google.colab import files
files.upload()

# import modul yang diperlukan
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error

# read data
data = pd.read_csv('/content/Salary_Data.csv')

"""# DATA NDERSTANDING"""

# tampilkan data
data.head(6)

# info tentang data
data.info()

# deskripsi tentang data
data.describe()

# ukuran data
data.shape

# frekuensi tiap value yang dala dalam kolom YearsExperience
data['YearsExperience'].value_counts()

# frekuensi tiap value yang dala dalam kolom Salary
data['Salary'].value_counts()

"""# DATA VISUALIZATION

### plot distribusi data
untuk melihat distribusi dari data, apakah data berdistribusi normal atau tidak
"""

# distribusi plot YearsExperience
sns.distplot(data['YearsExperience'])

# distribusi plot Salary
sns.distplot(data['Salary'])

"""Karena bentuk kurva distribusinya condong kekenan atau memiliki bentuk moderate positif, sehingga nantinya kolom YearsExperience dan Salary akan ditransformasi agar datanya berdistribusi normal dan memiliki bentuk kurva yang simetri.

### Count plot data
untuk melihat frekuensi tiap unique data
"""

# countplot YearsExperience
sns.countplot(data['YearsExperience'])

# countplot Salary
sns.countplot(data['Salary'])

# lihat korelasi antar variabel
data.corr()

# boxplot YearsExperience
sns.boxplot(data['YearsExperience'])

# boxplot Salary
sns.boxplot(data['Salary'])

"""# Lihat sebaran data
untuk melihat sebaran data apakah data berdistribusi linier atau tidak.
"""

# melihat sebaran data YearsExperience
stats.probplot(data['YearsExperience'], plot=plt)
plt.ylabel('Frequency')
plt.xlabel('YearsExperience Distribution')
image = plt.figure()
plt.show()

# melihat sebaran data Salary
stats.probplot(data['Salary'], plot=plt)
plt.ylabel('Frequency')
plt.xlabel('Salery Distribution')
image = plt.figure()
plt.show()

"""Karena bentuk sebaran datanya mendekati bentuk garis lurus sehingga pada kasus ini model yang nantinya digunakan adalah model linier."""

# sebaran data YearsExperience dan Salary
plt.figure(figsize=(12,6))
sns.pairplot(data,x_vars=['YearsExperience'],y_vars=['Salary'],size=7,kind='scatter')
plt.xlabel('Years Experience')
plt.ylabel('Salary')
plt.title('Salary Prediction')
plt.show()

"""# DATA PREPARATION
Dalam model regresi linier ada beberapa hal yang harus dipastikan sebelum membuat model antara lain :
1. linieritas data
2. normalitas data
4. outlier

### Handling Missing value
"""

# cek missing value
data.isnull().sum()[data.isnull().sum()>0]

"""Tidak terdapat missing value pada data ini.

### Data Transformation
"""

# transformasikan kolom YearsExperience ke bentuk sqrt(x)
data["YearsExperience"] = np.sqrt(data["YearsExperience"])

# tampilkan data yang telah ditransformasi
data["YearsExperience"]

#recek linieritas data
stats.probplot(data['YearsExperience'], plot=plt)
plt.ylabel('Frequency')
plt.xlabel('YearsExperience Distribution')
image = plt.figure()
plt.show()

# recek normalitas datanya
sns.distplot(data['YearsExperience'])

# transformasi Salary ke bentuk sqrt(x)
data['Salary'] = np.sqrt(data['Salary'])

#recek linieritas data
stats.probplot(data['Salary'], plot=plt)
plt.ylabel('Frequency')
plt.xlabel('Salary Distribution')
image = plt.figure()
plt.show()

# recek distribusi Salary
sns.distplot(data['Salary'])

"""# Modeling
Model yang akan dibuat adalah model regresi linier sederhana

### Split data
bagi data menjadi data train dan data test
"""

# tentukan variebel dependen dan independenya
X = data['YearsExperience']
y = data['Salary']

# bagi data menjadi 80% data train dan 20% data test
X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.8, test_size=0.2,random_state=42)

# cek ukuran X_train dan X_test
print('Ukuran X_train :', X_train.shape)
print('Ukuran X_test :', X_test.shape)

# buat tabel baru X_train dan X_test
X_train = X_train[:,np.newaxis]
X_test = X_test[:,np.newaxis]

# fit model
lr = LinearRegression()
lr.fit(X_train,y_train)

# prediksi nilai y 
y_pred = lr.predict(X_test)
y_pred

"""### Evaluasi model yang telah dibuat dengan melihat nilai mse (mean square error)"""

# hitung mse hasil predikssi
mse = mean_squared_error(y_test,y_pred)
mse

# hitung nilai score r2 nya
r2 = r2_score(y_test,y_pred)
r2

# nilai Koefisien regresi dan intersepnya
print('Intercept of the model:',lr.intercept_)
print('Coefficient of the line:',lr.coef_)

"""### Model Regresi linier sederhana
y = a + bx
dengan nilai :
*  a (intersep) = 104.26406274670927
*  b (koefisien regresi) = 74.9199579

maka model yang diperoleh yaitu :

# y = 104.26406274670927 + 74.9199579x
"""